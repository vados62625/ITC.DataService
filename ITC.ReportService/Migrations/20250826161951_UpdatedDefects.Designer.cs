// <auto-generated />
using System;
using ITC.ReportService.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ITC.ReportService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250826161951_UpdatedDefects")]
    partial class UpdatedDefects
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ITC.Domain.Models.Analysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("CageDefect")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EngineId")
                        .HasColumnType("uuid");

                    b.Property<double>("InnerRingDefect")
                        .HasColumnType("double precision");

                    b.Property<long>("LockToken")
                        .HasColumnType("bigint");

                    b.Property<double>("Misalignment")
                        .HasColumnType("double precision");

                    b.Property<double>("OuterRingDefect")
                        .HasColumnType("double precision");

                    b.Property<double>("RollingElementsDefect")
                        .HasColumnType("double precision");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<double>("Unbalance")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("EngineId");

                    b.ToTable("Analyses");
                });

            modelBuilder.Entity("ITC.Domain.Models.Engine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EngineStatus")
                        .HasColumnType("integer");

                    b.Property<long>("LockToken")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Engines");
                });

            modelBuilder.Entity("ITC.Domain.Models.Analysis", b =>
                {
                    b.HasOne("ITC.Domain.Models.Engine", null)
                        .WithMany("Analyses")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITC.Domain.Models.Engine", b =>
                {
                    b.Navigation("Analyses");
                });
#pragma warning restore 612, 618
        }
    }
}
